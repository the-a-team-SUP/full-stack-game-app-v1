{"version":3,"sources":["Components/Questions/qestionsList.js","Components/Login.js","Helpers/socket.ioHelper.js","redux/game/gameActions.js","redux/game/gameTypes.js","Helpers/updateScore.js","Components/Questions/inputRadio.js","Components/OnUsers.js","Components/gameScore/scoresList.js","helpers/userHelpers.js","Components/Logout.js","redux/user/userActions.js","redux/user/userTypes.js","Components/UserHeader/userHeader.js","Components/Landing.js","Components/MyFaceComponent.js","Components/List.js","redux/question/questionActions.js","redux/question/questionTypes.js","App.js","serviceWorker.js","redux/question/questionReducer.js","redux/user/userReducer.js","redux/game/gameReducer.js","redux/rootReducer.js","redux/user/SocketMiddleware.js","redux/store.js","index.js"],"names":["socket","FacebookAuth","state","message","addToStore","token","verified","jwt","verify","name","picture","userID","email","firstName","split","localStorage","setItem","props","addUserToStore","authenticated","error","console","log","loginBtnClicked","a","removeItem","componentDidMount","getItem","setState","incomingToken","qs","parse","window","location","search","ignoreQueryPrefix","facebookData","this","loggedInUsers","history","push","id","className","alt","src","process","href","onClick","Component","connect","user","dispatch","type","newUser","socketToListen","updateGameScoreAction","data","payload","updateScore","users","map","userId","score","InputRadio","questionId","choises","selectedGame","myData","useDispatch","choiseList","choise","index","option","JSON","key","value","isCorrect","answer","newScores","emit","gameId","checkAnswer","required","for","QuestionList","questions","game","useSelector","openSocket","useEffect","on","scoreData","gameResult","endGameToAll","questionList","length","question","content","btnDisplayer","onSubmit","e","preventDefault","OnUsers","usersList","userame","onlineUsers","ScoresList","scoreList","scoreListHoler","sort","b","userData","find","Logout","logoutThisUser","removeToken","axios","post","then","serverData","catch","logoutUser","withRouter","UserHeader","Landing","result","isGameOpen","getArrayObject","array","indexParam","userObject","getAllUsers","MyFaceComponent","facebookResponse","response","status","appId","autoLoad","fields","callback","List","fecthLoggedInUsers","get","res","addFetchedUsers","err","joinGameButtonHandler","joinGameHandler","gameToCheck","createGameButtonHandler","createGameHandler","updateGame","updateGameList","addJoinedUser","questionArray","getQuestions","alert","gameList","games","g","createGame","joinGame","questionsArray","App","path","exact","component","Login","Boolean","hostname","match","inititalState","loading","reducer","action","initialStatus","incomingUserData","updatedLoggedInUsers","otherUsers","filter","toString","userToLogout","unloggedOutUsers","updatedGameList","open","gameStatus","rootReducer","combineReducers","userReducer","questionReducer","gameReducer","SocketClient","createMySocketMiddleware","next","Store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97a0ca56.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport openSocket from 'socket.io-client';\r\nimport { updateGameScoreAction, endGameHandler, endGameToAll } from '../../redux';\r\nimport { updateScore } from '../../Helpers/updateScore';\r\nimport { socketToListen } from '../../Helpers/socket.ioHelper';\r\nimport { getQuestionsIds } from '../../Helpers/questionsHelper';\r\nimport InputRadio from './inputRadio';\r\n\r\nlet socket;\r\nconst QuestionList = ({ questions, myData }) => {\r\n    const dispatch = useDispatch();\r\n    const { game } = useSelector(state => state.game)\r\n    socket = openSocket(socketToListen);\r\n    useEffect(() => {\r\n        socket.on('scoreFromServer', (scoreData) => {\r\n            if(game.id === scoreData.gameId){\r\n                const newScores = updateScore(scoreData.userId, game.users);\r\n                dispatch(updateGameScoreAction(newScores));\r\n            }\r\n        });\r\n\r\n        socket.on('serverEndGame', (gameResult) => {\r\n            if(game.id === gameResult.id){\r\n                dispatch(endGameToAll(gameResult));\r\n            }\r\n        })\r\n    }, [socketToListen])\r\n    \r\n    let questionList = questions.length ? (\r\n        questions.map((question, index) => {\r\n            return(\r\n                <div key={index}>\r\n                    <p><b>{index+1}. </b>{question.content}</p>\r\n                    <InputRadio questionId={question.id} choises={question.choises} socket={socket} selectedGame={game} myData={myData} />\r\n                </div>\r\n            )\r\n        })\r\n    ) : (false);\r\n\r\n    // <div>There is no question!</div>\r\n    let btnDisplayer = <input type=\"submit\" value=\"Submit\"></input>;\r\n    if(!questionList) btnDisplayer = null;\r\n\r\n    const submitResult = (e) => {\r\n        e.preventDefault();\r\n        dispatch(endGameHandler(game))\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={submitResult}>\r\n            <h2>Game Questions</h2>\r\n            {questionList}\r\n            {btnDisplayer}\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default QuestionList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport qs from 'qs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nclass FacebookAuth extends Component {\r\n    state = { message: '' }\r\n    addToStore = (token) => {\r\n        try {\r\n            const verified = jwt.verify(token, 'mysecretkey');\r\n            let { name, picture, userID, email } = verified;\r\n            const firstName = name.split(' ')[0];\r\n            localStorage.setItem('token', token);\r\n            this.props.addUserToStore({\r\n                name,\r\n                email,\r\n                picture,\r\n                firstName,\r\n                userID,\r\n                authenticated: true\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    loginBtnClicked = async () => {\r\n        localStorage.removeItem('message');\r\n        console.log('login btn clicked');\r\n    };\r\n    componentDidMount = () => {\r\n        const token = localStorage.getItem('token');\r\n        const message = localStorage.getItem('message');\r\n        this.setState({ message: message })\r\n        if (token) {\r\n            this.addToStore(token);\r\n        } else {\r\n            const incomingToken = qs.parse(window.location.search, { ignoreQueryPrefix: true }).token;\r\n            if (incomingToken) {\r\n                this.addToStore(incomingToken);\r\n            } else {\r\n            }\r\n        }\r\n    };\r\n    render() {\r\n        let facebookData;\r\n        if (this.props.loggedInUsers[0] && this.props.loggedInUsers[0].authenticated) {\r\n            facebookData = (\r\n                this.props.history.push('/list')\r\n            );\r\n        } else {\r\n            facebookData = (\r\n                <div>\r\n                    <section id=\"showcase\">\r\n                        <div className=\"main\">\r\n                            <img alt=\"Facebook Logo\" src={`${process.env.PUBLIC_URL}Asserts/Images/gamelogo.png`} className=\"logo\" />\r\n                            <h2 className=\"highlight\">full-stack-game-app-v1</h2>\r\n                            <p>\r\n                                full-stack-game-app-v1 is a coolest game ever !! This is a coolest Multiple choice game or objective response is a form of an objective assessment in which respondents are asked to select only correct answers from the choices offered as a list. The multiple choice format is most frequently used in educational testing, in market research, and in elections, when a person chooses between multiple candidates or parties.\r\n\t\t\t\t\t\t</p>\r\n                            <h3>{this.state.message || this.props.message}</h3>\r\n                            <a href='https://express-react-redux-game.herokuapp.com/api/auth/facebook'>\r\n                                <button className=\"button\" onClick={this.loginBtnClicked}>Login With Facebook</button>\r\n                            </a>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {facebookData}\r\n            </div>\r\n        );\r\n    }\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUsers: state.user.loggedInUsers,\r\n        message: state.user.message\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addUserToStore: (user) => { dispatch({ type: 'LOGIN_USER', newUser: user }) }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FacebookAuth);","export const socketToListen = 'https://express-react-redux-game.herokuapp.com';\r\n","import openSocket from 'socket.io-client';\r\nimport { CREATE_GAME, UPDATE_GAMELIST, JOIN_GAME, UPDATE_GAME, ADD_JOINED_USER, UPDATE_GAME_SCORE, END_GAME, END_GAME_TO_ALL } from './gameTypes';\r\nimport { socketToListen } from '../../Helpers/socket.ioHelper';\r\n\r\nexport const createGame = (game) =>\r\n{\r\n  return {\r\n    type: CREATE_GAME,\r\n    payload: game\r\n  }\r\n}\r\n\r\nexport const joinGame = (game) =>\r\n{\r\n  return {\r\n    type: JOIN_GAME,\r\n    payload: game\r\n  }\r\n}\r\n\r\nexport const addJoinedUser = (game) =>\r\n{\r\n  return {\r\n    type: ADD_JOINED_USER,\r\n    payload: game\r\n  }\r\n}\r\nexport const updateGame = (game) =>\r\n{\r\n  return {\r\n    type: UPDATE_GAME,\r\n    payload: game\r\n  }\r\n}\r\n\r\nexport const updateGameList = (game) =>\r\n{\r\n  return {\r\n    type: UPDATE_GAMELIST,\r\n    payload: game\r\n  }\r\n}\r\n\r\nexport const createGameHandler = (game) => {\r\n  const pathSocket = \"https://express-react-redux-game.herokuapp.com/\";\r\n  const socket = openSocket(pathSocket);\r\n  socket.emit('makeGame', game);\r\n  return (dispatch) => {\r\n    dispatch(createGame(game))\r\n  }\r\n}\r\n\r\nexport const joinGameHandler = (game) => {\r\n  const pathSocket = \"https://express-react-redux-game.herokuapp.com/\";\r\n  const socket = openSocket(pathSocket);\r\n  socket.emit('joinRoom', game);\r\n  return (dispatch) => {\r\n    dispatch(joinGame(game))\r\n  }\r\n}\r\n\r\nexport const updateGameScoreAction = (data) => {\r\n  return {\r\n    type: UPDATE_GAME_SCORE,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const endGame = () => {\r\n  return {\r\n    type: END_GAME,\r\n    payload: 'done'\r\n  }\r\n}\r\n\r\nexport const endGameHandler = (gameResult) => {\r\n  const socket = openSocket(socketToListen);\r\n  socket.emit('clientEndGame', gameResult, () => {});\r\n  return (dispatch) => {\r\n    dispatch(endGame())\r\n  }\r\n}\r\n\r\nexport const endGameToAll = (gameResult) => {\r\n  return {\r\n    type: END_GAME_TO_ALL,\r\n    payload: gameResult\r\n  }\r\n}\r\n","export const CREATE_GAME = 'CREATE_GAME';\r\nexport const UPDATE_GAMELIST = 'UPDATE_GAMELIST';\r\nexport const JOIN_GAME = 'JOIN_GAME';\r\nexport const ADD_JOINED_USER = 'ADD_JOINED_USER';\r\nexport const UPDATE_GAME = 'UPDATE_GAME';\r\nexport const UPDATE_GAME_SCORE = 'UPDATE_GAME_SCORE';\r\nexport const END_GAME = 'END_GAME';\r\nexport const END_GAME_TO_ALL = 'END_GAME_TO_ALL';\r\n","export const updateScore = (userID, users) => {\r\n    return users.map((data) => (userID === data.userId) ? ({ ...data, score: ++data.score }) : (data));\r\n}","import React, { useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { updateGameScoreAction } from '../../redux';\r\nimport { updateScore } from '../../Helpers/updateScore';\r\n\r\nconst InputRadio = ({questionId, choises, socket, selectedGame, myData}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const checkAnswer = (answer) => {\r\n        if(answer){\r\n            const newScores = updateScore(myData.userID, selectedGame.users);\r\n            dispatch(updateGameScoreAction(newScores))\r\n            socket.emit('scoreFromClient', { userId: myData.userID, gameId: selectedGame.id });\r\n        }\r\n    }\r\n\r\n    const choiseList = choises.map((choise, index) => {\r\n        const option = JSON.parse(choise);\r\n        return(\r\n            <div key={index}>\r\n                <input type=\"radio\" name={questionId} value={option.isCorrect} onClick={() => checkAnswer(option.isCorrect)} required />\r\n                <label for={questionId}>{option.answer}</label>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return(<div>{choiseList}</div>);\r\n}\r\n\r\nexport default InputRadio;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nclass OnUsers extends Component {\r\n  // fecthLoggedInUsers = () => {\r\n  //   axios\r\n  //     .get(\"http://localhost:4000/api/loggedinusers\")\r\n  //     .then( res =>\r\n  //     {\r\n  //       this.props.addFetchedUsers(res.data.data);\r\n  //     })\r\n  //     .catch(err => {});\r\n  // };\r\n  render() {\r\n    const { users } = this.props;\r\n    const usersList = users.length ? (\r\n      users.map((user, index) => {\r\n        return (\r\n          <div className=\"users\" key={index}>\r\n            <p>\r\n              <img src={user.picture} alt=\"profilePic\"></img>\r\n            </p>\r\n            <b>\r\n              <p>{user.userame}</p>\r\n            </b>\r\n            <p>{user.email}</p>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <div>\r\n        <p> No user is online yet</p>\r\n      </div>\r\n    );\r\n    return <div>{usersList}</div>;\r\n  }\r\n\r\n  componentDidMount(){\r\n      // this.fecthLoggedInUsers()\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.onlineUsers\r\n  };\r\n};\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     addFetchedUsers: users =>\r\n//       dispatch({ type: \"ADD_FETCHED_USERS\", users: users })\r\n//   };\r\n// };\r\n\r\nexport default connect(mapStateToProps)(OnUsers);\r\n","import React from 'react';\r\nimport { userExist } from '../../helpers/userHelpers';\r\n\r\nconst ScoresList = ( { scoreList, usersList } ) => {\r\n    const scores =  scoreList.sort((a, b) => (b.score - a.score));\r\n    const scoreListHoler = scores.map(( data, index ) => {\r\n        const userData = userExist(data.userId, usersList);\r\n            return (\r\n                <div className=\"scores\" key={ index }>\r\n                    <br /><hr /><br />\r\n                    <img src={userData.picture || null} alt=\"profile\" />\r\n                    <p><b>{ userData.name}</b></p>\r\n                    <p>{userData.email || null}</p>\r\n                    <p className=\"score\"><b>{data.score}/5</b></p>\r\n                    <br />\r\n                </div>\r\n            )\r\n        })\r\n\r\n    return(\r\n        <div>\r\n            <h2>Game Score</h2>\r\n            {scoreListHoler}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ScoresList;","export const userExist = (userId, users) => {\r\n    return users.find( data => data.userID == userId );\r\n}\r\n","import { logoutUser } from '../redux/user/userActions';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../App.css\";\r\n\r\nclass Logout extends Component {\r\n    removeToken() {\r\n        const token = localStorage.removeItem('token');\r\n        return token;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"btn\"\r\n                    onClick={(() => {\r\n                        if (this.props.loggedInUsers.length !== 0) {\r\n                            this.props.logoutThisUser(this.props.loggedInUsers[0].userID);\r\n                            this.removeToken();\r\n                            this.props.history.push(\"/\")\r\n                        }\r\n                    })}\r\n                >\r\n                    <i className=\"fa fa-sign-out\"> </i> Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUsers: state.user.loggedInUsers\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logoutThisUser: (userID) => { dispatch(logoutUser(userID)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Logout));\r\n","import { LOGIN_USER, LOGOUT_USER } from './userTypes'\r\nimport axios from 'axios'\r\n\r\nexport const loginUser = (user) => {\r\n  return {\r\n    type: LOGIN_USER,\r\n    payload: user\r\n  }\r\n}\r\n\r\nexport const logoutUser = (userID) => {\r\n  return (dispatch) => axios.post('https://express-react-redux-game.herokuapp.com/api/facebooklogout', { userID }).then(data => {\r\n    dispatch({\r\n      type: LOGOUT_USER,\r\n      user: userID,\r\n      serverData: data\r\n    })\r\n\r\n  }).catch(error => dispatch({\r\n    type: LOGOUT_USER,\r\n    user: userID,\r\n    serverData: error\r\n  })\r\n  )\r\n}\r\n\r\nexport const postUser = (user) => {\r\n  const { name, email, picture, userID } = user;\r\n  return (dispatch) => axios.post('https://express-react-redux-game.herokuapp.com/api/facebooklogin', {\r\n    name,\r\n    email,\r\n    picture,\r\n    userID\r\n  }).then(response => {\r\n    dispatch(loginUser(user))\r\n  }).catch(error => console.log(error))\r\n}\r\n","export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST';\r\nexport const LOGOUT_USER = \"LOGOUT_USER\";\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst UserHeader = ({userData}) => {\r\n    return(\r\n        <div>\r\n            <img src={userData.picture || null} alt={userData.name} />\r\n            <b><p>{userData.name}</p></b>\r\n            <p>{userData.email || null}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default UserHeader;","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport openSocket from 'socket.io-client';\r\nimport { socketToListen } from '../Helpers/socket.ioHelper';\r\nimport { retrieveQuestionRequest } from '../redux';\r\nimport QuestionList from '../Components/Questions/qestionsList';\r\nimport OnUsers from './OnUsers'\r\nimport ScoreList from '../Components/gameScore/scoresList';\r\nimport Logout from './Logout';\r\nimport UserHeader from './UserHeader/userHeader';\r\n\r\nlet socket;\r\nclass Landing extends Component {\r\n  componentDidMount() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) this.props.history.push(\"/\");\r\n    \r\n    // socket = openSocket(socketToListen);\r\n    // socket.on('QuestionsFromServer', (questionArray) => {\r\n    //   if(this.props.game.game.id === questionArray.gameId){\r\n    //     this.props.getQuestions(questionArray.questions);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    const { questions } = this.props.question;\r\n    const { game, isGameOpen } = this.props.game;\r\n    const { loggedInUsers, onlineUsers } = this.props.users;\r\n    const getArrayObject = (array, indexParam) => {\r\n      let userObject;\r\n      array.map((data, index) => {\r\n        if(index === indexParam) userObject = data;\r\n      })\r\n      return {...userObject};\r\n    }\r\n    const getAllUsers = [\r\n      ...onlineUsers,\r\n      loggedInUsers[0]\r\n    ]\r\n    let result;\r\n    if (isGameOpen === \"done\")\r\n      result = <ScoreList scoreList={ game.users } usersList={ getAllUsers } />;\r\n    else if(game.users.length > 4)\r\n      result = <QuestionList questions={questions} myData={getArrayObject(loggedInUsers, 0)} />;\r\n    else\r\n      result = <p>Wait for 5 users, please.</p>;\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div>\r\n          <h4>Online Users</h4>\r\n          <OnUsers />\r\n          <br></br>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"userSide\">\r\n            <Logout history={this.props.history} />\r\n            <UserHeader userData={getArrayObject(loggedInUsers, 0)} />\r\n            <hr></hr>\r\n            <div>\r\n            {result}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    question: state.question,\r\n    users: state.user,\r\n    game: state.game\r\n  }\r\n};\r\n\r\nconst mapActionToProps = dispatch => {\r\n  return {\r\n    // getQuestions: (questionsArray) => dispatch(retrieveQuestionRequest(questionsArray))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Landing);\r\n","import React, { Component } from 'react';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport { connect } from 'react-redux';\r\nimport { postUser } from '../redux';\r\n\r\nclass MyFaceComponent extends Component {\r\n    loginBtnClicked = () => {\r\n        console.log('login btn clicked');\r\n    };\r\n    facebookResponse = (response) => {\r\n        if(response.status !== 'unknown'){\r\n            const { name, picture, userID, email } = response;\r\n            this.props.addUserToStore({\r\n                name,\r\n                email,\r\n                picture,\r\n                userID,\r\n                authenticated: true\r\n            });\r\n            this.props.history.push(\"/list\")\r\n        }\r\n    };\r\n    render(){\r\n        let facebookData;\r\n        // if(this.state.authenticated){\r\n            // facebookData = (\r\n                // <div>\r\n                //     <p>Hello { `${this.state.firstName}` }</p>\r\n                //     <p><img alt='profilepic' src={`https://graph.facebook.com/${this.state.userID}/picture?type=large`}></img></p>\r\n                // </div>\r\n            // );\r\n        // } else {\r\n            facebookData = (\r\n                <FacebookLogin\r\n                appId='853316458415497'\r\n                autoLoad={true}\r\n                fields='name, picture, email'\r\n                onClick={this.loginBtnClicked}\r\n                callback={this.facebookResponse}\r\n                />  \r\n            );\r\n        // }\r\n        return (\r\n            <div>\r\n                { facebookData }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUsers: state.loggedInUsers\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addUserToStore: (user) => dispatch({ type: 'LOGIN_USER', newUser: user })\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyFaceComponent);\r\n","import React, { Component } from \"react\";\r\nimport openSocket from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport {\r\n  createGameHandler,\r\n  updateGameList,\r\n  updateGame,\r\n  joinGameHandler,\r\n  addJoinedUser,\r\n  retrieveQuestionRequest\r\n} from '../redux';\r\nimport { connect } from \"react-redux\";\r\nimport Logout from './Logout';\r\nimport \"../styles/List.scss\";\r\n\r\nclass List extends Component {\r\n  fecthLoggedInUsers = () => {\r\n    axios\r\n      .get(\"https://express-react-redux-game.herokuapp.com/api/loggedinusers\")\r\n      .then( res =>\r\n      {\r\n        this.props.addFetchedUsers(res.data.data);\r\n      })\r\n      .catch(err => {});\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fecthLoggedInUsers()\r\n    const { history, updateGame, updateGameList, addJoinedUser, game } = this.props;\r\n    const socket = openSocket(\"https://express-react-redux-game.herokuapp.com/\");\r\n    socket.on('gameCreated', (game) => {\r\n      updateGameList(game)\r\n      updateGame(game)\r\n      if(game.users.length >= 5) {\r\n        socket.emit('join-room', game.id);\r\n      }\r\n    })\r\n\r\n    socket.on('joinSuccess', (game) => {\r\n      addJoinedUser(game)\r\n      if(game.users.length >= 5) {\r\n        socket.emit('join-room', game.id);\r\n      }\r\n    })\r\n\r\n    socket.on('QuestionsFromServer', (questionArray) => {\r\n      if(this.props.game.id === questionArray.gameId){\r\n        this.props.getQuestions(questionArray.questions);\r\n      }\r\n    });\r\n\r\n    socket.on('alreadyJoined', (game) => {\r\n      alert('You are already in the game', game);\r\n    })\r\n    socket.on('redirect', (id) => {\r\n      history.push('/landing')\r\n    })\r\n  }\r\n\r\n  joinGameButtonHandler = (game) => {\r\n    const { history, joinGameHandler, users, gameToCheck } = this.props;\r\n    game.users.push({userId: users[0].userID, score: 0});\r\n    joinGameHandler(game);\r\n  }\r\n\r\n  createGameButtonHandler = () => {\r\n    const { history, createGameHandler, users } = this.props;\r\n    createGameHandler({ userID: users[0].userID, name: users[0].name });\r\n  }\r\n\r\n  render() {\r\n    const { history, gameList, users } = this.props;\r\n\r\n    if (!users[0]) history.push('/')\r\n\r\n    const games = gameList.map((g, index) => <li key={index}><p>GameId : {g.id} with {g.users.length} participants <button onClick={() => this.joinGameButtonHandler(g)}>Join Game</button></p></li>);\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"center-div\">\r\n          <div className=\"games\">\r\n            <Logout history={this.props.history} />\r\n            <h2>All available games</h2>\r\n            <ul>\r\n              {games}\r\n            </ul>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button onClick={this.createGameButtonHandler}>Create Game</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.loggedInUsers,\r\n    game: state.game.game,\r\n    gameToCheck: state.game,\r\n    gameList: state.game.gameList\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createGameHandler: (game) => dispatch(createGameHandler(game)),\r\n    updateGame: (game) => dispatch(updateGame(game)),\r\n    updateGameList: (game) => dispatch(updateGameList(game)),\r\n    joinGameHandler: (game) => dispatch(joinGameHandler(game)),\r\n    addJoinedUser: (game) => dispatch(addJoinedUser(game)),\r\n    getQuestions: (questionsArray) => dispatch(retrieveQuestionRequest(questionsArray)),\r\n    addFetchedUsers: users => dispatch({ type: \"ADD_FETCHED_USERS\", users: users })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n","import axios from \"axios\";\r\n\r\nimport { FETCH_QUESTIONS_REQUEST, RETRIEVE_QUESTIONS_REQUEST, FETCH_QUESTIONS_LOADING, FETCH_QUESTIONS_ERROR } from \"./questionTypes\";\r\n\r\nexport const retrieveQuestionRequest = (data) => {\r\n  return {\r\n    type: RETRIEVE_QUESTIONS_REQUEST,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const fetchQuestionRequest = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch({type : FETCH_QUESTIONS_LOADING });\r\n    axios.get(`https://express-react-redux-game.herokuapp.com/api/questions`)\r\n      .then(res => {\r\n        dispatch({ type: FETCH_QUESTIONS_REQUEST, payload: res.data.questions });\r\n        dispatch({type : FETCH_QUESTIONS_LOADING });\r\n      }).catch(error => {\r\n        dispatch({ type: FETCH_QUESTIONS_ERROR, payload: error });\r\n        dispatch({type : FETCH_QUESTIONS_LOADING });\r\n    })\r\n  }\r\n};\r\n\r\n// export const retrieveQuestionRequest = (questions) => {\r\n//   return (dispatch) => {\r\n//     dispatch(updateQuestions(questions));\r\n//   }\r\n// };\r\n\r\n// export const retrieveQuestionRequest = (questions) => {\r\n//   return (dispatch, getState) => {\r\n//     dispatch({ type: RETRIEVE_QUESTIONS_REQUEST, payload: questions });\r\n//   }\r\n// };\r\n","export const FETCH_QUESTIONS_REQUEST = \"FETCH_QUESTIONS_REQUEST\";\r\nexport const RETRIEVE_QUESTIONS_REQUEST = \"RETRIEVE_QUESTIONS_REQUEST\";\r\nexport const FETCH_QUESTIONS_LOADING = \"FETCH_QUESTIONS_LOADING\";\r\nexport const FETCH_QUESTIONS_ERROR = \"FETCH_QUESTIONS_ERROR\";\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Login from './Components/Login';\r\nimport Landing from \"./Components/Landing\";\r\nimport MyFaceComponent from './Components/MyFaceComponent';\r\nimport List from './Components/List';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Login} />\r\n          <Route path=\"/login\" exact component={MyFaceComponent} />\r\n          <Route path=\"/landing\" exact component={Landing} />\r\n          <Route path=\"/list\" exact component={List} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { FETCH_QUESTIONS_REQUEST, RETRIEVE_QUESTIONS_REQUEST, FETCH_QUESTIONS_LOADING, FETCH_QUESTIONS_ERROR } from \"./questionTypes\";\r\n\r\nconst inititalState = {\r\n  loading: false,\r\n  questions: [],\r\n  error: \"\"\r\n};\r\n\r\nconst reducer = (state = inititalState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_QUESTIONS_REQUEST:\r\n      return {\r\n        ...state,\r\n        questions: action.payload\r\n      };\r\n\r\n    case RETRIEVE_QUESTIONS_REQUEST:\r\n      return {\r\n        ...state,\r\n        questions: [ ...action.payload ]\r\n      };\r\n    \r\n    case FETCH_QUESTIONS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: !state.loading\r\n      };\r\n\r\n    case FETCH_QUESTIONS_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { LOGIN_USER, LOGOUT_USER } from \"./userTypes\";\r\n\r\nconst initialStatus = {\r\n  loggedInUsers: [],\r\n  message: ' ',\r\n  onlineUsers: []\r\n};\r\n\r\nconst reducer = (state = initialStatus, action) => {\r\n  if (action.type === LOGIN_USER) {\r\n    const incomingUserData = action.newUser;\r\n    const updatedLoggedInUsers = [\r\n      ...state.loggedInUsers,\r\n      incomingUserData\r\n    ];\r\n    return {\r\n      ...state,\r\n      loggedInUsers: updatedLoggedInUsers\r\n    }\r\n  } else if (action.type === \"ADD_LOGGEDIN_USER_FROM_SOCKET\") {\r\n    return {\r\n      ...state,\r\n      // loggedInUsers: [ ...state.loggedInUsers, action.newUser ],\r\n      onlineUsers: [...state.onlineUsers, action.newUser]\r\n    };\r\n  } else if (action.type === \"ADD_FETCHED_USERS\") {\r\n    const otherUsers = action.users.filter((user) => {\r\n      return user.userID !== state.loggedInUsers[0].userID.toString();\r\n    });\r\n    return {\r\n      ...state,\r\n      // loggedInUsers: [ ...state.loggedInUsers, ...action.users ]\r\n      onlineUsers: [...otherUsers]\r\n    };\r\n  } else if (action.type === LOGOUT_USER) {\r\n    const userToLogout = action.user\r\n    const unloggedOutUsers = state.loggedInUsers.filter(users => {\r\n      localStorage.setItem('message', action.serverData.data.message);\r\n      return users.userID !== userToLogout;\r\n    })\r\n    return {\r\n      ...state,\r\n      loggedInUsers: unloggedOutUsers,\r\n      message: action.serverData.data.message\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import { CREATE_GAME, ADD_JOINED_USER, UPDATE_GAMELIST, UPDATE_GAME, JOIN_GAME, UPDATE_GAME_SCORE, END_GAME, END_GAME_TO_ALL } from './gameTypes';\r\n\r\nconst inititalState = {\r\n  loading: false,\r\n  gameList: [],\r\n  game: {\r\n    id: 1,\r\n    users: []\r\n  },\r\n  error: \"\",\r\n  isGameOpen:false\r\n};\r\n\r\nconst reducer = (state = inititalState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_GAME:\r\n      return {\r\n        ...state,\r\n        game: action.payload,\r\n        isGameOpen: \"pending\"\r\n      };\r\n\r\n    case UPDATE_GAMELIST:\r\n      return {\r\n        ...state,\r\n        gameList: [...state.gameList, action.payload]\r\n      };\r\n\r\n\r\n    case UPDATE_GAME:\r\n      return {\r\n        ...state,\r\n        game: action.payload\r\n      };\r\n\r\n    case JOIN_GAME:\r\n      return {\r\n        ...state,\r\n        game: action.payload\r\n      };\r\n\r\n    case ADD_JOINED_USER:\r\n      const updatedGameList = state.gameList.map(game => {\r\n        if (game.id === action.payload.id) {\r\n          game.users = action.payload.users\r\n        }\r\n        return game\r\n      })\r\n      \r\n      return {\r\n        ...state,\r\n        gameList: updatedGameList,\r\n        game: action.payload\r\n      };\r\n\r\n    case UPDATE_GAME_SCORE:\r\n      return {\r\n        ...state,\r\n        game: { ...state.game, users: [...action.payload ] }\r\n      };\r\n\r\n    case END_GAME:\r\n      return {\r\n        ...state,\r\n        game: { ...state.game, open: false },\r\n        isGameOpen: action.payload\r\n      };\r\n\r\n    case END_GAME_TO_ALL:\r\n      return {\r\n        ...state,\r\n        game: { ...state.game, users: action.payload.users, open: false },\r\n        isGameOpen: action.payload.gameStatus\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux'\r\nimport questionReducer from './question/questionReducer';\r\nimport userReducer from './user/userReducer';\r\nimport gameReducer from './game/gameReducer';\r\n\r\nconst rootReducer = combineReducers( {\r\n  user: userReducer,\r\n  question: questionReducer,\r\n  game: gameReducer\r\n})\r\n\r\nexport default rootReducer","import SocketClient from \"socket.io-client\";\r\n\r\nconst socket = SocketClient(\"https://express-react-redux-game.herokuapp.com\");\r\nconst createMySocketMiddleware = () => {\r\n  return ({ dispatch }) => {\r\n    socket.on(\"logged_in_user\", (newUser) => {\r\n      return dispatch({\r\n        type: \"ADD_LOGGEDIN_USER_FROM_SOCKET\",\r\n        newUser: newUser\r\n      });\r\n    });\r\n    return next => (action) => {\r\n      if (action.type === \"LOGIN_USER\") {\r\n        socket.emit(\"new_user_logged_in\", action.newUser);\r\n        return next(action);\r\n      }\r\n      return next(action);\r\n    };\r\n  };\r\n};\r\n\r\nexport default createMySocketMiddleware;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './rootReducer'\r\nimport createMySocketMiddleware from './user/SocketMiddleware'\r\n\r\nconst Store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, thunk, createMySocketMiddleware())))\r\n\r\nexport default Store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport Store from './redux/store';\r\n\r\nReactDOM.render(<Provider store={Store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}